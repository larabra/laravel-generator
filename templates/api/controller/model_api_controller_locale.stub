<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_REQUEST$\$MODEL_NAME$Request as Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\$MODEL_NAME$Request as Update$MODEL_NAME$Request;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Support\Facades\Response;

$DOC_CONTROLLER$
class $MODEL_NAME$ApiController extends AppBaseController
{
    $DOC_INDEX$
    public function index(Request $request)
    {
        $query = $MODEL_NAME$::query();

        if ($request->get('skip')) {
            $query->skip($request->get('skip'));
        }
        if ($request->get('limit')) {
            $query->limit($request->get('limit'));
        }

        $$MODEL_NAME_PLURAL_CAMEL$ = $query->get();

         return $this->sendResponse(
             $$MODEL_NAME_PLURAL_CAMEL$->toArray(),
             trans('messages.retrieved', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.plural')])
         );
    }

    $DOC_STORE$
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::create($input);

        return $this->sendResponse(
             $$MODEL_NAME_CAMEL$->toArray(),
             trans('messages.saved', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
        );
    }

    $DOC_SHOW$
    public function show($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError(
                trans('messages.not_found', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
            );
        }

        return $this->sendResponse(
            $$MODEL_NAME_CAMEL$->toArray(),
            trans('messages.retrieved', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
        );
    }

    $DOC_UPDATE$
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
           return $this->sendError(
               trans('messages.not_found', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
           );
        }

        $$MODEL_NAME_CAMEL$->fill($request->all());
        $$MODEL_NAME_CAMEL$->save();

        return $this->sendResponse(
             $$MODEL_NAME_CAMEL$->toArray(),
             trans('messages.updated', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
        );
    }

    $DOC_DESTROY$
    public function destroy($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
           return $this->sendError(
                 trans('messages.not_found', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
           );
        }

        $$MODEL_NAME_CAMEL$->delete();

         return $this->sendResponse(
             $id,
             trans('messages.deleted', ['model' => trans('models/$MODEL_NAME_PLURAL_CAMEL$.singular')])
         );
    }
}
